#!/bin/bash

# Copyright (c) 2020, Mellanox Technologies
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.

set -e

LANG=C
BF_HOSTNAME="localhost"
SDIR="/root/workspace"
BFB="${BFB:-/lib/firmware/mellanox/boot/default.bfb}"
CAPSULE="${CAPSULE:-/lib/firmware/mellanox/boot/capsule/boot_update2.cap}"
verbose=0
kdir=$(/bin/ls -1d /lib/modules/4.19* /lib/modules/4.20* /lib/modules/5.* 2> /dev/null | head -1)
if [ -n "$kdir" ]; then
	kernel=${kdir##*/}
else
	kernel=$(/bin/ls -1 /lib/modules/ | head -1)
fi

usage() {
cat << EOF
Usage: `basename $0` [ OPTIONS ]
OPTIONS:
-H, -hostname,       --hostname <hostname>      Hostname for the SmartNIC. Default: $BF_HOSTNAME
-k, -kernel,         --kernel <kernel version>  Kernel version for the SmartNIC. Default: $kernel
-v, -verbose,   --verbose                       Run script in verbose mode. Will print out each step of execution.
-h, -help,      --help                          Display help


EOF
}

options=$(getopt -l "hostname:,kernel:,help,verbose" -o "H:k:hv" -a -- "$@")

eval set -- "$options"

while true
do
        case $1 in
                -h|--help)
                    usage
                    exit 0
                    ;;
				-H|--hostname)
					shift
					BF_HOSTNAME=$1
					;;
				-k|--kernel)
					shift
					kernel=$1
					;;
				-v|--verbose)
					verbose=1
					set -xv
					;;
				--)
                    shift
                    break;;
        esac
        shift
done

bootctl_module="mlxbf-bootctl"

modinfo -n -k $kernel "mlx-bootctl" && bootctl_module="mlx-bootctl"

SCRIPTS_DIR=`dirname $0`

WDIR=${WDIR:-/root/workspace/bfb}

echo "Work directory: $WDIR"

CENTOS_IMAGE=`cat /etc/mlnx-release`
CENTOS_BFB=${CENTOS_IMAGE}.bfb

PATH=$PATH:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/mellanox/scripts:/opt/mellanox/scripts/bin
mkbfb=`which mlx-mkbfb`

if [ ! -x "${mkbfb}" ]; then
	echo "- ERROR: mlx-mkbfb is required to build BFB image"
	exit 1
fi

if [[ ! -n "${BFB}" || ! -e "${BFB}" ]]; then
	echo "- ERROR: BFB was not found"
	exit 1
fi

# Execute command w/ echo and exit if it fail
ex()
{
        echo "$@"
        if ! "$@"; then
                printf "\nFailed executing $@\n\n"
                exit 1
        fi
}

echo ${BF_HOSTNAME} > /etc/hostname

hostname ${BF_HOSTNAME}

ex /bin/rm -rf ${WDIR}
ex mkdir -p ${WDIR}
ex cd ${WDIR}
ex /bin/rm -rf initramfs

initramfs=$WDIR/dump-initramfs-v0

if ! ( rpm -q dracut-tools > /dev/null 2>&1 ); then
	yum install -y dracut-tools
fi

if ! ( rpm -q parted-3.2 > /dev/null 2>&1 ); then
	if [ ! -e /tmp/parted-3.2-39.el7.aarch64.rpm ]; then
		wget -P /tmp https://github.com/Mellanox/bfb-build/raw/master/common/packages/parted-3.2-39.el7.aarch64.rpm
	fi
	rpm -Uhv /tmp/parted-3.2-39.el7.aarch64.rpm || true
fi

ex dracut --no-hostonly -m "bash network base shutdown" --force-drivers "${bootctl_module} mlxbf_tmfifo dw_mmc_bluefield mmc_block virtio_console mlx5_core mlx5_ib ib_umad nvme nvme-tcp nvme-rdma nvme-fc nvme-fabrics nvme-core" --filesystems "vfat" --gzip $initramfs ${kernel}

rm -f /etc/udev/rules.d/91-tmfifo_net.rules /etc/udev/rules.d/92-oob_net.rules

cat > /etc/default/grub << EOF
GRUB_TIMEOUT=0
GRUB_RECORDFAIL_TIMEOUT=2
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL=console
GRUB_SERIAL_COMMAND="serial --unit=1"
GRUB_CMDLINE_LINUX="crashkernel=auto console=hvc0 console=ttyAMA0 earlycon=pl011,0x01000000 modprobe.blacklist=mlx5_core,mlx5_ib net.ifnames=0 biosdevname=0"
GRUB_DISABLE_RECOVERY="true"
GRUB_TIMEOUT_STYLE=countdown
GRUB_DISABLE_OS_PROBER=false
EOF


case "$(file --brief --mime-type "$initramfs")" in
	"application/x-lzma")
		cat_initrd="lzcat" ;;
	"application/x-lz4")
		cat_initrd="lz4cat" ;;
	*)
		cat_initrd="zcat" ;;
esac

echo "Rebuilding $initramfs"

mkdir -p ${WDIR}/initramfs
cd initramfs
$cat_initrd "$initramfs" | sudo cpio -i

copy_bin()
{
	if [ -e $1 ]; then
		bin=$1
	else
		bin=`which $1 2> /dev/null`
	fi
	if [ -z "$bin" ]; then
		echo "ERROR: Cannot find $1"
		return 1
	fi
	sudo mkdir -p .`dirname $bin`
	if [ -e .${bin} ]; then
		/bin/rm -f .${bin}
	fi
	sudo cp -a $bin .${bin}

	# Copy dependencies
	for lib in `ldd $bin 2> /dev/null | grep '=>' | awk '{print $3}' | grep -v '(0x0'`
	do
		if [ -e .$lib ]; then
			continue
		fi
		sudo mkdir -p .`dirname $lib`
		sudo cp -a $lib .$lib
		if [ -h $lib ]; then
			tlib=`readlink -f $lib`
			if [ ! -e .$tlib ]; then
				sudo mkdir -p .`dirname $tlib`
				sudo cp $tlib .$tlib
			fi
		fi
	done
}

copy_rpm()
{
	package=$1

	if ! (rpm -q $package); then
		yum install -y $package
	fi

	case $package in
		chkconfig)
			for f in `rpm -ql $package | grep -v share`
			do
				if [ -d $f ]; then
					mkdir -p .${f}
				else
					copy_bin $f
				fi
			done
			;;
		*mft*)
			for f in `rpm -ql $package | grep -v man`
			do
				if [ -d $f ]; then
					continue
				fi
				copy_bin $f
			done
			;;
		*)
			for f in `rpm -ql $package 2> /dev/null | grep -vE 'share|build-id'`
			do
				if [ -d $f ]; then
					continue
				fi
				copy_bin $f
			done
			;;
	esac
}

# Copy the content of RPM packages
for package in mlxbf-bfscripts util-linux dosfstools e2fsprogs kmod pciutils usbutils chkconfig mft mft-oem kernel-mft tar xfsprogs coreutils parted which curl $ADDON_RPMS
do
	copy_rpm $package || true
done

# Copy tools
for tool in	xz efibootmgr bash getopt hexdump mstflint lspci perl \
		lsblk shutdown systemctl strings \
		mlxbf-bootctl id grep $ADDON_TOOLS
do
	if [ -d $tool ]; then
		continue
	fi
	copy_bin $tool
done

sudo depmod -a -b ./ $kernel
sudo ldconfig -r ./
sudo mkdir -p usr/share/hwdata/ bin/
sudo cp /usr/share/hwdata/pci.ids ./usr/share/hwdata/
sudo mkdir -p ./lib/firmware/mellanox/boot/
sudo cp /lib/firmware/mellanox/boot/default.bfb ./lib/firmware/mellanox/boot/default.bfb
sudo cp -a /lib/firmware/mellanox/boot/capsule ./lib/firmware/mellanox/boot/
sudo cp $CAPSULE ./lib/firmware/mellanox/boot/capsule/
sudo mkdir -p mnt

# CVE-2021-4034 workaround
chmod 0755 /usr/bin/pkexec

ex mkdir -p centos
# Tar the image
XZ_OPT="--threads=0 -9 --verbose" tar -cJp --exclude='./workspace' --exclude='./signing-local' --exclude='./signing-shared' --exclude='./var/run/docker.sock' --exclude='./root/workspace' --exclude='./tmp/*' --exclude='./run/*' --exclude='./sys/*' --exclude='./proc/*' --exclude='./dev/*' --exclude='./.dockerenv' --exclude='./root/rpmbuild' --exclude='./root/.rpmmacros' --exclude='./root/.bash_history' --exclude='./var/tmp/*rpm' --exclude='./bin/qemu-aarch64-static' --exclude='./usr/bin/qemu-aarch64-static' --exclude='./usr/bin/qemu-arm-static' --exclude='./var/lib/yum/*' --exclude='./var/cache/yum/*' -f ./centos/image.tar.xz -C / .
ex install -m 0755 ${SDIR}/install.sh ./centos/install.sh

mkdir scripts
cat > scripts/install-centos.sh << EOF
#!/bin/sh

echo
echo "=================================" | tee /dev/kmsg
echo "Installing CentOS. Please wait..." | tee /dev/kmsg
echo "=================================" | tee /dev/kmsg

modprobe -a mlxbf_tmfifo dw_mmc_bluefield mmc_block virtio_console ${bootctl_module} 2>&1 | tee /dev/kmsg
modprobe -a mlx5_ib ib_uverbs 2>&1 | tee /dev/kmsg

sleep 5

/bin/sh /centos/install.sh
if [ \$? -eq 0 ]; then
        echo "===================================" | tee /dev/kmsg
        echo "Installation finished. Rebooting..." | tee /dev/kmsg
        echo "===================================" | tee /dev/kmsg
        echo
        reboot -f
else
        echo "========================" | tee /dev/kmsg
        echo "Failed to install CentOS" | tee /dev/kmsg
        echo "========================" | tee /dev/kmsg
fi
EOF

sed -i -e "s@source_conf /etc/conf.d@&\nbash -x /scripts/install-centos.sh@" init

# Make initramfs with new centos
find . | cpio -H newc -o | gzip -9 > $initramfs

# Make bfb
cd ..
if [ ! -e $CAPSULE ]; then
	echo "ERROR: Capsule file $CAPSULE does not exist"
	exit 1
fi

boot_args=$(mktemp)
boot_args2=$(mktemp)
boot_path=$(mktemp)
boot_desc=$(mktemp)
printf "console=ttyAMA1 console=hvc0 console=ttyAMA0 earlycon=pl011,0x01000000 earlycon=pl011,0x01800000 initrd=initramfs quiet" > \
	"$boot_args"
printf "console=ttyAMA1 console=hvc0 console=ttyAMA0 earlycon=pl011,0x13010000 initrd=initramfs quiet" > \
	"$boot_args2"

printf "VenHw(F019E406-8C9C-11E5-8797-001ACA00BFC4)/Image" > "$boot_path"
printf "Linux from rshim" > "$boot_desc"
vmlinuz=$WDIR/vmlinuz
if [ -e $SDIR/vmlinuz ]; then
	sudo zcat $SDIR/vmlinuz > "$vmlinuz"
elif [ -e /boot/vmlinuz-$kernel ]; then
	sudo zcat /boot/vmlinuz-$kernel > "$vmlinuz"
else
    sudo zcat /lib/modules/$kernel/vmlinuz > "$vmlinuz"
fi

mkdir -p /workspace

ex $mkbfb \
	--image "$vmlinuz" --initramfs "$initramfs" \
	--capsule "$CAPSULE" \
	--boot-args-v0 "$boot_args" \
	--boot-args-v2 "$boot_args2" \
	--boot-path "$boot_path" \
	--boot-desc "$boot_desc" \
	${BFB} /workspace/${CENTOS_BFB}
cd ..

echo "BFB is ready: `readlink -f /workspace/${CENTOS_BFB}`"
