#!/bin/bash -ex
###############################################################################
#
# Copyright 2022 NVIDIA Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###############################################################################

cd ${0%*/*}

if [ ! -e Dockerfile ]; then
	echo "ERROR: Dockerfile is missing."
	exit 1
fi

if ! (which wget > /dev/null 2>&1); then
	echo "wget is required to build BFB"
	exit 1
fi

if ! (which docker > /dev/null 2>&1); then
	echo "docker is required to build BFB"
	exit 1
fi

DISTRO="ctyunos"
DISTRO_VERSION="23.01"
DISTRO_KERNEL=${DISTRO_KERNEL:-""}
ARCH=${ARCH:-"arm64-dpu"}
DOCA_VERSION="2.8.0"
BSP_VERSION="4.8.0-13249"
MLNX_OFED_VERSION="24.07-0.6.0.0"
BF2_BMC_VERSION="24.07-14"
BF3_BMC_VERSION="24.07-14"
BF2_CEC_VERSION="04.0f"
BF3_CEC_VERSION="00.02.0182.0000"
BF3_NIC_FW_VERSION="32_42_1000"
IMAGE_TYPE=${IMAGE_TYPE:-"prod"}
CUSTOM_VERSION=${CUSTOM_VERSION:-""}
INCLUDE_BF2BMC=${INCLUDE_BF2BMC:-"yes"}
INCLUDE_BF3BMC=${INCLUDE_BF3BMC:-"yes"}
BASE_URL=${BASE_URL:-"https://linux.mellanox.com/public/repo"}

WDIR=/tmp/${DISTRO}${DISTRO_VERSION}${DISTRO_KERNEL}.$$

echo "Downloading mlxbf-bootimages..."
case "$IMAGE_TYPE" in
	prod)
		bootimages="mlxbf-bootimages-signed-${BSP_VERSION}.aarch64.rpm"
		;;
	dev)
		bootimages="mlxbf-bootimages-devsigned-${BSP_VERSION}.aarch64.rpm"
		;;
	unsigned)
		bootimages="mlxbf-bootimages-${BSP_VERSION}.aarch64.rpm"
		;;
esac

mkdir -p $WDIR/bootimages
wget --no-verbose -P $WDIR/bootimages ${BASE_URL}/doca/${DOCA_VERSION}/${DISTRO}${DISTRO_VERSION}${DISTRO_KERNEL}/${ARCH}/$bootimages

cp -a \
	Dockerfile \
	create_bfb \
	install.sh \
	repos \
	10-mlx-console-messages.conf \
	../../common/tools/qemu-aarch64-static \
	build_ctyunos_bfb \
        $WDIR

if [ -d install.env ]; then
	cp -a install.env \
		$WDIR
else
	cp -a ../../common/install.env \
		$WDIR
fi

cd $WDIR

echo -e "[doca] \n\
name=Nvidia DOCA repository \n\
baseurl=$BASE_URL/doca/$DOCA_VERSION/${DISTRO}${DISTRO_VERSION}${DISTRO_KERNEL}/arm64-dpu/ \n\
gpgcheck=0 \n\
enabled=1" > $WDIR/repos/doca.repo

mkdir -p BF2BMC/pk/{bmc,cec} BF2BMC/qp
mkdir -p BF3BMC/pk/{bmc,cec,golden_images/dpu,golden_images/fw} BF3BMC/{dk,qp}
if [ "$IMAGE_TYPE" == "prod" ]; then
	if [ "${INCLUDE_BF2BMC}" == "yes" ]; then
		echo "Downloading BlueField-2 BMC software..."
		wget -q -P $WDIR/BF2BMC/pk/bmc -r --no-verbose --no-directories -l1 --no-parent -A 'bf2-bmc*tar' ${BASE_URL}/bluefield/BMC/BF2/bmc/${BF2_BMC_VERSION}/
		wget -q -P $WDIR/BF2BMC/pk/cec -r --no-verbose --no-directories -l1 --no-parent -A 'cec*bin' ${BASE_URL}/bluefield/BMC/BF2/cec/${BF2_CEC_VERSION}/
	fi

	if [ "${INCLUDE_BF3BMC}" == "yes" ]; then
		echo "Downloading BlueField-3 BMC software..."
		wget -q -P $WDIR/BF3BMC/pk/bmc -r --no-verbose --no-directories -l1 --no-parent -A 'bf3-bmc*fwpkg' ${BASE_URL}/bluefield/BMC/BF3/bmc/${BF3_BMC_VERSION}/
		wget -q -P $WDIR/BF3BMC/pk/cec -r --no-verbose --no-directories -l1 --no-parent -A 'cec*fwpkg' ${BASE_URL}/bluefield/BMC/BF3/cec/${BF3_CEC_VERSION}/
		wget -q -P $WDIR/BF3BMC/pk/golden_images/dpu -r --no-verbose --no-directories -l1 --no-parent -A 'BlueField*.bfb' ${BASE_URL}/bluefield/BMC/BF3/golden_images/dpu/${BSP_VERSION}/
		wget -q -P $WDIR/BF3BMC/pk/golden_images/fw -r --no-verbose --no-directories -l1 --no-parent -A 'fw*.bfb' ${BASE_URL}/bluefield/BMC/BF3/golden_images/nic-fw/${BF3_NIC_FW_VERSION}/
	fi
fi

docker_image=bfb_runtime_${DISTRO,,}${DISTRO_VERSION,,}

docker rm -f BlueField_OS_${DISTRO}_${DISTRO_VERSION} 2> /dev/null || true

sed -i -e "s/@IMAGE_TYPE@/$IMAGE_TYPE/g;s/@CUSTOM_VERSION@/$CUSTOM_VERSION/g" \
	-e "s/@DOCA_VERSION@/$DOCA_VERSION/g" \
	-e "s/@MLNX_OFED_VERSION@/$MLNX_OFED_VERSION/g" \
	-e "s/@BSP_VERSION@/$BSP_VERSION/g" \
	-e "s,@BASE_URL@,$BASE_URL,g" \
	-e "s/@DISTRO_VERSION@/$DISTRO_VERSION/g" build_ctyunos_bfb

docker build -t ${docker_image} \
	--build-arg BASE_URL=$BASE_URL \
	--build-arg DOCA_VERSION=$DOCA_VERSION \
	--build-arg BSP_VERSION=$BSP_VERSION \
	--build-arg DISTRO=$DISTRO \
	--build-arg DISTRO_VERSION=$DISTRO_VERSION \
	--build-arg DISTRO_KERNEL=$DISTRO_KERNEL \
	-f Dockerfile .

docker run -t --rm --privileged -e container=docker \
	-v $PWD:/workspace \
	--name BlueField_OS_${DISTRO}_${DISTRO_VERSION}${DISTRO_KERNEL} \
	--mount type=bind,source=/dev,target=/dev \
	--mount type=bind,source=/sys,target=/sys \
	${docker_image}

readlink -f *.bfb

echo "Default root password is: ctyunos_23"
