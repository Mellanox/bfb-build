#!/bin/bash

###############################################################################
#
# Copyright 2023 NVIDIA Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###############################################################################

set -e

LANG=C
SDIR="/root/workspace"
BFB="${BFB:-/lib/firmware/mellanox/boot/default.bfb}"
CAPSULE="${CAPSULE:-/lib/firmware/mellanox/boot/capsule/boot_update2.cap}"
verbose=0

usage() {
cat << EOF
Usage: $(basename $0) [ OPTIONS ]
OPTIONS:
-k, -kernel,    --kernel <kernel version>  Kernel version for the SmartNIC. Default: $kernel
-v, -verbose,   --verbose                       Run script in verbose mode. Will print out each step of execution.
-h, -help,      --help                          Display help


EOF
}

options=$(getopt -l "kernel:,help,verbose" -o "k:hv" -a -- "$@")

eval set -- "$options"

while true
do
        case $1 in
                -h|--help)
                    usage
                    exit 0
                    ;;
				-k|--kernel)
					shift
					kernel=$1
					;;
				-v|--verbose)
					verbose=1
					set -xv
					;;
				--)
                    shift
                    break;;
        esac
        shift
done

SCRIPTS_DIR=$(dirname $0)

WDIR=${WDIR:-/root/workspace/bfb}

echo "Work directory: $WDIR"

OL_IMAGE=$(cat /etc/mlnx-release)
OL_BFB=${OL_IMAGE}.bfb

PATH=$PATH:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/mellanox/scripts:/opt/mellanox/scripts/bin
mkbfb=$(which mlx-mkbfb)

if [ ! -x "${mkbfb}" ]; then
	echo "- ERROR: mlx-mkbfb is required to build BFB image"
	exit 1
fi

if [[ ! -n "${BFB}" || ! -e "${BFB}" ]]; then
	echo "- ERROR: BFB was not found"
	exit 1
fi

# Execute command w/ echo and exit if it fail
ex()
{
        echo "$@"
        if ! "$@"; then
                printf "\nFailed executing $@\n\n"
                exit 1
        fi
}

ex /bin/rm -rf ${WDIR}
ex mkdir -p ${WDIR}
ex cd ${WDIR}
ex /bin/rm -rf initramfs

initramfs=$WDIR/dump-initramfs-v0

if ! ( rpm -q dracut-tools > /dev/null 2>&1 ); then
	yum install -y dracut-tools
fi

kmods=""
for kmod in dw_mmc-bluefield dw_mmc dw_mmc-pltfm mmc_block mlxbf-bootctl \
			virtio_net virtio_console sdhci dw_mmc-pltfm sdhci-of-dwcmshc \
			xfs vfat  mlxbf-tmfifo mlx5_core mlx5_ib ib_umad nvme nvme-tcp \
			nvme-rdma nvme-fc nvme-fabrics nvme-core gpio-mlxbf3 mlxbf_gige
do
    if (modinfo -k $kernel $kmod 2>/dev/null | grep "filename:" | grep -q builtin); then
        continue
    fi

    mod=$(find /lib/modules/$kernel -name "${kmod}.ko*" 2> /dev/null || true)
    if [ -n "$mod" ]; then
        kmods="$kmods $kmod"
    fi
done

# Create ssh keys
yes | /usr/bin/ssh-keygen -A  -N ""
mkdir -p /root/.ssh
chmod 0700 /root/.ssh
touch /root/.ssh/authorized_keys
chmod 600 /root/.ssh/authorized_keys
echo "Building BFB's initramfs with: $kmods"
dracut --no-hostonly -m "bash network base systemd systemd-initrd dracut-systemd shutdown sshd ssh-client udev-rules" \
		--install "/usr/lib/udev/rules.d/91-tmfifo_net.rules /lib/udev/rules.d/92-oob_net.rules" \
		--force-drivers "$kmods" --gzip $initramfs ${kernel}
if [ $? -ne 0 ]; then
	echo "ERROR: dracut failed"
	exit 1
fi

cat > /etc/default/grub << EOF
GRUB_TIMEOUT=0
GRUB_RECORDFAIL_TIMEOUT=2
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL=console
GRUB_SERIAL_COMMAND="serial --unit=1"
GRUB_CMDLINE_LINUX="crashkernel=auto console=hvc0 console=ttyAMA0 earlycon=pl011,0x01000000 net.ifnames=0 biosdevname=0"
GRUB_DISABLE_RECOVERY="true"
GRUB_TIMEOUT_STYLE=countdown
GRUB_DISABLE_OS_PROBER=false
GRUB_DISABLE_LINUX_UUID=false
EOF


case "$(file --brief --mime-type "$initramfs")" in
	"application/x-lzma")
		cat_initrd="lzcat" ;;
	"application/x-lz4")
		cat_initrd="lz4cat" ;;
	*)
		cat_initrd="zcat" ;;
esac

echo "Rebuilding $initramfs"

mkdir -p ${WDIR}/initramfs
cd initramfs
$cat_initrd "$initramfs" | sudo cpio -i

# if (file init | grep -q systemd); then
# 	if [ -x /usr/lib/dracut/modules.d/99base/init.sh ]; then
# 		echo "Replacing systemd init by script"
# 		rm -f init
# 		cp /usr/lib/dracut/modules.d/99base/init.sh init
# 	fi
# fi

copy_bin()
{
	if [ -e $1 ]; then
		bin=$1
	else
		bin=$(which $1 2> /dev/null)
	fi
	if [ -z "$bin" ]; then
		echo "WARNING: Cannot find $1"
		return 1
	fi
	sudo mkdir -p .$(dirname $bin)
	if [ -e .${bin} ]; then
		/bin/rm -f .${bin}
	fi
	sudo cp -a $bin .${bin}

	# Copy dependencies
	for lib in $(ldd $bin 2> /dev/null | grep '=>' | awk '{print $3}' | grep -v '(0x0')
	do
		if [ -e .$lib ]; then
			continue
		fi
		sudo mkdir -p .$(dirname $lib)
		sudo cp -a $lib .$lib
		if [ -h $lib ]; then
			tlib=$(readlink -f $lib)
			if [ ! -e .$tlib ]; then
				sudo mkdir -p .$(dirname $tlib)
				sudo cp $tlib .$tlib
			fi
		fi
	done
}

copy_rpm()
{
	package=$1

	if ! (rpm -q $package); then
		echo "Did not find $package, attempting to download"
		yum install -y $package || return
	fi

	case $package in
		chkconfig)
			for f in $(rpm -ql $package | grep -v share)
			do
				if [ -d $f ]; then
					mkdir -p .${f}
				else
					copy_bin $f
				fi
			done
			;;
		*mft*|mstflint)
			for f in $(rpm -ql $package | grep -v man)
			do
				if [ -d $f ]; then
					continue
				fi
				copy_bin $f
			done
			;;
		*)
			for f in $(rpm -ql $package | grep -vE 'share|build-id')
			do
				if [ -d $f ]; then
					continue
				fi
				copy_bin $f
			done
			;;
	esac
}

if (rpm -q kernel-mft > /dev/null 2>&1); then
	kernel_mft="kernel-mft"
elif (rpm -q kmod-kernel-mft-mlnx > /dev/null 2>&1); then
	kernel_mft="kmod-kernel-mft-mlnx"
fi

# Copy the content of RPM packages
			   #  openssh-server
for package in gawk mlxbf-bfscripts mlxbf-bootctl util-linux dosfstools \
			   e2fsprogs kmod pciutils usbutils chkconfig mstflint mft \
			   mft-oem $kernel_mft tar xfsprogs coreutils parted which curl \
			   openssl net-tools wget dhcp-client ipcalc iputils dbus-tools \
			   systemd-udev initscripts shadow-utils crypto-policies \
			   openssh openssh-server rng-tools passwd dmidecode \
			   python36 jq sshpass $ADDON_RPMS
do
	copy_rpm $package || true
done

# Copy tools
for tool in	xz efibootmgr bash getopt hexdump lspci perl \
		lsblk shutdown systemctl strings \
		id grep hostnamectl $ADDON_TOOLS
do
	if [ -d $tool ]; then
		continue
	fi
	copy_bin $tool
done

sudo depmod -a -b ./ $kernel
sudo ldconfig -r ./
sudo mkdir -p usr/share/hwdata/ bin/
sudo cp /usr/share/hwdata/pci.ids ./usr/share/hwdata/
sudo mkdir -p ./lib/firmware/mellanox/boot/
sudo cp /lib/firmware/mellanox/boot/default.bfb ./lib/firmware/mellanox/boot/default.bfb
sudo cp -a /lib/firmware/mellanox/boot/capsule ./lib/firmware/mellanox/boot/
sudo cp $CAPSULE ./lib/firmware/mellanox/boot/capsule/
sudo mkdir -p mnt

if [ -e /usr/bin/pkexec ]; then
    # CVE-2021-4034 workaround
    chmod 0755 /usr/bin/pkexec
fi

ex mkdir -p ol
# Tar the image
XZ_OPT="--threads=0 -9 --verbose" tar -cJp --exclude='./workspace' --exclude='./signing-local' --exclude='./signing-shared' --exclude='./var/run/docker.sock' --exclude='./root/workspace' --exclude='./tmp/*' --exclude='./run/*' --exclude='./sys/*' --exclude='./proc/*' --exclude='./dev/*' --exclude='./.dockerenv' --exclude='./root/rpmbuild' --exclude='./root/.rpmmacros' --exclude='./root/.bash_history' --exclude='./var/tmp/*rpm' --exclude='./bin/qemu-aarch64-static' --exclude='./usr/bin/qemu-aarch64-static' --exclude='./usr/bin/qemu-arm-static' --exclude='./var/lib/yum/*' --exclude='./var/cache/yum/*' -f ./ol/image.tar.xz -C / .
ex install -m 0755 ${SDIR}/install.sh ./ol/install.sh
cp -a ${SDIR}/install.env ./ol/

mkdir scripts
cat > scripts/initrd-install << EOF
#!/bin/sh

echo
echo "=================================" | tee /dev/kmsg
echo "Installing OL. Please wait..." | tee /dev/kmsg
echo "=================================" | tee /dev/kmsg

for kmod in $kmods
do
	/sbin/modprobe \$kmod 2>&1 | tee /dev/kmsg
done

sleep 5

/bin/sh /ol/install.sh
if [ \$? -eq 0 ]; then
        echo "===================================" | tee /dev/kmsg
        echo "Installation finished. Rebooting..." | tee /dev/kmsg
        echo "===================================" | tee /dev/kmsg
        echo
        reboot -f
else
        echo "========================" | tee /dev/kmsg
        echo "  Failed to install OL  " | tee /dev/kmsg
        echo "========================" | tee /dev/kmsg
fi
EOF

chmod +x scripts/initrd-install
ln -s /usr/lib/systemd/system/sshd.service etc/systemd/system/initrd.target.wants/sshd.service

cat > usr/lib/systemd/system/install-ol.service << EOF
[Unit]
Description=Install OL
After=initrd-root-fs.target initrd-parse-etc.service
After=dracut-initqueue.service dracut-mount.service

[Service]
Type=oneshot
ExecStart=/scripts/initrd-install
StandardInput=null
StandardOutput=syslog
StandardError=syslog+console
EOF

ln -s /usr/lib/systemd/system/install-ol.service etc/systemd/system/initrd.target.wants/install-ol.service

# Make initramfs with new ol
find . | cpio -H newc -o | gzip -9 > $initramfs

# Make bfb
cd ..
if [ ! -e $CAPSULE ]; then
	echo "ERROR: Capsule file $CAPSULE does not exist"
	exit 1
fi

boot_args=$(mktemp)
boot_args2=$(mktemp)
boot_path=$(mktemp)
boot_desc=$(mktemp)
printf "console=ttyAMA1 console=hvc0 console=ttyAMA0 earlycon=pl011,0x01000000 earlycon=pl011,0x01800000 initrd=initramfs" > \
	"$boot_args"
printf "console=hvc0 selinux=0 console=ttyAMA0 earlycon=pl011,0x13010000 initrd=initramfs" > \
	"$boot_args2"

printf "VenHw(F019E406-8C9C-11E5-8797-001ACA00BFC4)/Image" > "$boot_path"
printf "Linux from rshim" > "$boot_desc"
vmlinuz=$WDIR/vmlinuz
if [ -e $SDIR/vmlinuz ]; then
	sudo zcat $SDIR/vmlinuz > "$vmlinuz"
elif [ -e /boot/vmlinuz-$kernel ]; then
	sudo zcat /boot/vmlinuz-$kernel > "$vmlinuz"
else
    sudo zcat /lib/modules/$kernel/vmlinuz > "$vmlinuz"
fi

mkdir -p /workspace

ex $mkbfb \
	--image "$vmlinuz" --initramfs "$initramfs" \
	--capsule "$CAPSULE" \
	--boot-args-v0 "$boot_args" \
	--boot-args-v2 "$boot_args2" \
	--boot-path "$boot_path" \
	--boot-desc "$boot_desc" \
	${BFB} /workspace/${OL_BFB}
cd ..

echo "BFB is ready: $(readlink -f /workspace/${OL_BFB})"
