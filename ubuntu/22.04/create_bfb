#!/bin/bash
###############################################################################
#
# Copyright 2022 NVIDIA Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###############################################################################

set -e

BF_HOSTNAME=""
SDIR="/root/workspace"
BFB="${BFB:-/lib/firmware/mellanox/boot/default.bfb}"
CAPSULE="${CAPSULE:-/lib/firmware/mellanox/boot/capsule/boot_update2.cap}"
verbose=0
kdir=$(/bin/ls -1d /lib/modules/4.20* /lib/modules/5.* 2> /dev/null | head -1)
if [ -n "$kdir" ]; then
	kernel=${kdir##*/}
else
	kernel=$(/bin/ls -1 /lib/modules/ | head -1)
fi

usage() {
cat << EOF
Usage: `basename $0` [ OPTIONS ]
OPTIONS:
-i, -install_bfb,    --install_bfb <BFB>        Installation BFB to be used as a basis for the target BFB. Default: $BFB
-H, -hostname,       --hostname <hostname>      Hostname for the SmartNIC. Default: empty
-k, -kernel,         --kernel <kernel version>  Kernel version for the SmartNIC. Default: $kernel
-v, -verbose,   --verbose                       Run script in verbose mode. Will print out each step of execution.
-h, -help,      --help                          Display help

EOF
}


options=$(getopt -l "install_bfb:,hostname:,kernel:,help,verbose" -o "i:H:k:hv" -a -- "$@")

eval set -- "$options"

while true
do
	case $1 in
		-h|--help)
			usage
			exit 0
			;;
		-i|--install_bfb)
			shift
			BFB=$1
			;;
		-H|--hostname)
			shift
			BF_HOSTNAME=$1
			;;
		-k|--kernel)
			shift
			kernel=$1
			;;
		-v|--verbose)
			verbose=1
			set -xv
			;;
		--)
			shift
			break;;
	esac
	shift
done

SCRIPTS_DIR=`dirname $0`

WDIR=${WDIR:-/root/workspace/bfb}

echo "Work directory: $WDIR"

ubuntu_IMAGE=`cat /etc/mlnx-release`
ubuntu_BFB=${ubuntu_IMAGE}.bfb

PATH=$PATH:/opt/mellanox/scripts:/opt/mellanox/scripts/bin
mkbfb=`which mlx-mkbfb`

if [ ! -x "${mkbfb}" ]; then
	echo "- ERROR: mlx-mkbfb is required to build BFB image"
	exit 1
fi

if [[ ! -n "${BFB}" || ! -e "${BFB}" ]]; then
	echo "- ERROR: BFB was not found"
	exit 1
fi

finish() {
	rm -f "$boot_args" "$boot_path" "$boot_desc"
	sudo rm -rf "$WDIR"
}
trap finish EXIT

# Execute command w/ echo and exit if it fail
ex()
{
	echo "$@"
	if ! "$@"; then
		printf "\nFailed executing $@\n\n"
		exit 1
	fi
}

echo ${BF_HOSTNAME} > /etc/hostname

hostname ${BF_HOSTNAME}

/usr/sbin/update-initramfs -u -k $kernel

ex mkdir -p ${WDIR}
ex cd ${WDIR}
ex rm -rf initramfs

initramfs=/boot/initrd.img-$kernel
initramfs=$(realpath $initramfs)
# ex mkinitramfs -o $WDIR/dump-initramfs-v0 $kernel
cp $initramfs $WDIR/dump-initramfs-v0
initramfs=$WDIR/dump-initramfs-v0

case "$(file --brief --mime-type "$initramfs")" in
	"application/x-lzma")
		cat_initrd="lzcat" ;;
	"application/x-lz4")
		cat_initrd="lz4cat" ;;
	"application/zstd")
		cat_initrd="zstdcat" ;;
	*)
		cat_initrd="zcat" ;;
esac

echo "Rebuilding $initramfs"

mkdir -p ${WDIR}/initramfs
cd initramfs
$cat_initrd "$initramfs" | sudo cpio -i

copy_bin()
{
	if [ -e $1 ]; then
		bin=$1
	else
		bin=`which $1 2> /dev/null`
	fi
	if [ -z "$bin" ]; then
		echo "ERROR: Cannot find $1"
		exit 1
	fi
	sudo mkdir -p .`dirname $bin`
	if [ ! -e .${bin} ]; then
		sudo cp -a $bin .${bin}
	fi

	# Copy dependencies
	for lib in `ldd $bin 2> /dev/null | grep '=>' | awk '{print $3}'`
	do
		if [ -e .$lib ]; then
			continue
		fi
		sudo mkdir -p .`dirname $lib`
		sudo cp -a $lib .$lib
		if [ -h $lib ]; then
			tlib=`readlink -f $lib`
			if [ ! -e .$tlib ]; then
				sudo mkdir -p .`dirname $tlib`
				sudo cp $tlib .$tlib
			fi
		fi
	done
}

module_exist()
{
	mod=`find ./lib/modules/$kernel -name "${1}.ko*" 2> /dev/null`
	test -n "$mod"
	return $?
}

copy_module()
{
	if module_exist $1; then
		return
	fi

	for mod in `modinfo -F depends -k $kernel $1 | tr -s ',' ' '`
	do
		copy_module $mod
	done

	mod_ko=`modinfo -F filename -k $kernel $1`
	mkdir -p ./`dirname ${mod_ko}`
	sudo cp ${mod_ko} ./${mod_ko}
}

(cd usr/bin; sudo ln -s xz xzcat)
# Remove tools coming with busybox
for tool in `dpkg -L mlxbf-scripts | grep bin/` \
		`dpkg -L dosfstools` \
		`dpkg -L e2fsprogs` \
		`dpkg -L fdisk` \
		`dpkg -L kmod | grep -v share` \
		`dpkg -L pciutils | grep -v share` \
		`dpkg -L usbutils | grep -v share` \
		`dpkg -L mft` \
		`dpkg -L mft-oem` \
		`dpkg -L kernel-mft-modules` \
		`dpkg -L tar`
do
	if [ -d $tool ]; then
		continue
	fi
	/bin/rm -f .${tool}
done

for tool in `dpkg -L mlxbf-scripts | grep bin/` \
		`dpkg -L dosfstools | grep -v share` \
		`dpkg -L e2fsprogs | grep -v share` \
		`dpkg -L fdisk | grep -v share` \
		`dpkg -L kmod | grep -v share` \
		`dpkg -L pciutils | grep -v share` \
		`dpkg -L usbutils | grep -v share` \
		`dpkg -L mft` \
		`dpkg -L mft-oem` \
		`dpkg -L kernel-mft-modules` \
		`dpkg -L tar | grep -v share` \
		xz efibootmgr bash getopt hexdump mstflint lspci perl \
		lsblk watchdog shutdown systemctl strings aarch64-linux-gnu-strings \
		mlxbf-bootctl id dirname
do
	if [ -d $tool ]; then
		continue
	fi
	copy_bin $tool
done

for mod in nvme-rdma nvme-tcp nvme mlx5_ib ib_ipoib ib_iser
do
	copy_module $mod
done
sudo depmod -a -b ./ $kernel

sudo mkdir -p usr/share/misc/ bin/ var/log/watchdog
sudo cp /usr/share/misc/pci.ids usr/share/misc/
sudo cp /etc/watchdog.conf etc
# Make sure we can load mlx-bootctl
bootctl_ko=`modinfo -F filename -k $kernel mlx-bootctl`
sudo cp $bootctl_ko .
sudo cp /lib/modules/$kernel/kernel/drivers/watchdog/sbsa_gwdt.ko .
sudo mkdir -p ./lib/firmware/mellanox/boot/
sudo cp /lib/firmware/mellanox/boot/default.bfb ./lib/firmware/mellanox/boot/default.bfb
sudo cp -a /lib/firmware/mellanox/boot/capsule ./lib/firmware/mellanox/boot/

sudo mkdir -p ./lib/udev/rules.d
sudo cp /lib/udev/rules.d/82-net-setup-link.rules ./lib/udev/rules.d/82-net-setup-link.rules
sudo mkdir -p ./etc/infiniband
sudo cp /etc/infiniband/vf-net-link-name.sh ./etc/infiniband/vf-net-link-name.sh

sudo mkdir -p mnt

ex mkdir -p ubuntu
# Tar the image
XZ_OPT="--threads=0 -9 --verbose" tar -cJp --exclude='./workspace' --exclude='./signing-local' --exclude='./signing-shared' --exclude='./var/run/docker.sock' --exclude='./root/workspace' --exclude='./tmp/*' --exclude='./run/*' --exclude='./sys/*' --exclude='./proc/*' --exclude='./dev/*' --exclude='./.dockerenv' --exclude='./root/.bash_history' --exclude='./var/tmp/*' --exclude='./bin/qemu-aarch64-static' --exclude='./usr/bin/qemu-aarch64-static' --exclude='./usr/bin/qemu-arm-static' --exclude='./var/cache/apt/*' -f ./ubuntu/image.tar.xz -C / .
ex install -m 0755 ${SDIR}/install.sh ./ubuntu/install.sh

cat > scripts/initrd-install << EOF
#!/bin/bash

printf_msg()
{
	echo "$@" | tee /dev/kmsg
	return 0
}

insmod /mlx-bootctl.ko > /dev/null 2>&1
insmod /sbsa_gwdt.ko > /dev/null 2>&1
/usr/sbin/watchdog > /dev/null 2>&1

printf_msg "================================="
printf_msg "Installing ubuntu. Please wait..."
printf_msg "================================="

/bin/bash /ubuntu/install.sh
if [ \$? -eq 0 ]; then
	printf_msg "==================================="
	printf_msg "Installation finished. Rebooting..."
	printf_msg "==================================="
	printf_msg
	reboot -f
else
	printf_msg "========================"
	printf_msg "Failed to install ubuntu"
	printf_msg "========================"
fi
EOF

chmod +x scripts/initrd-install
sudo rm -f conf/conf.d/ubuntu-core*
sudo sh -c 'echo "BOOT=initrd-install" > conf/conf.d/initrd_install'
sudo sh -c 'echo "ROOT=\"LABEL=writable\"" > conf/conf.d/default_root'


# Make initramfs with new ubuntu
find . -print0 | sudo cpio --null -o --format=newc | gzip -9 > "$initramfs"

# Make bfb
cd ..
if [ ! -e $CAPSULE ]; then
	echo "ERROR: Capsule file $CAPSULE does not exist"
	exit 1
fi

boot_args=$(mktemp)
boot_path=$(mktemp)
boot_desc=$(mktemp)
printf "console=ttyAMA1 console=hvc0 console=ttyAMA0 earlycon=pl011,0x01000000 earlycon=pl011,0x01800000 initrd=initramfs quiet" > \
	"$boot_args"

printf "VenHw(F019E406-8C9C-11E5-8797-001ACA00BFC4)/Image" > "$boot_path"
printf "Linux from rshim" > "$boot_desc"
vmlinuz=$WDIR/vmlinuz
if [ -e $SDIR/vmlinuz ]; then
	sudo cat $SDIR/vmlinuz > "$vmlinuz"
else
	sudo cat /boot/vmlinuz-$kernel > "$vmlinuz"
fi

mkdir -p /workspace

ex $mkbfb \
	--image "$vmlinuz" --initramfs "$initramfs" \
	--capsule "$CAPSULE" \
	--boot-args "$boot_args" \
	--boot-path "$boot_path" \
	--boot-desc "$boot_desc" \
	${BFB} /workspace/${ubuntu_BFB}

cd ..

echo "BFB is ready: `readlink -f /workspace/${ubuntu_BFB}`"
